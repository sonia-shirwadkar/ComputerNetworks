COSC 6377 Homework 1 submission                        Sonia Shirwadkar
Request for Comments: 01							   PS ID: 1430858
Category: Informational							   	   Contact: sshirwadkar@uh.edu
													   Sep 14 2016


                  Basic Socket Programming

Status of this Memo

   This document describes the properties of a basic client server program that
   I have developed as part of my homework 1 submission. The client sends a URL
   to the server and the server is responsible for fetching the URL, storing it
   in the current directory and sending the name and filesize to the client as
   response.

   The most recent version of this code and related information files scripts
   can be found in my GitHub private repository.

Description

	The Transmission Control Protocol (TCP) is a host-to-host protocol between hosts in
	packet-switched network. TCP is part of the transport layer of the OSI model and is
	responsible for carrying out reliable, in-order sending and receiving of packets
	between two hosts. This RFC gives a brief explanation of a basic client-server
	application that I have developed using TCP sockets. A socket is nothing but an endpoint
	of a network connection and can be seen as a combination of	IP address and port so as to
	uniquely identify applications at its end. The program that I have written serves as an
	introducion of how we can setup a connection between two nodes in a network by using sockets.	
	This program has two components: a client module and a server module. The program aims to setup
	a connection between the client and the server and get the client program to request the server
	to fetch a given url.
	
	A basic diagram of the connection model of my program is as follows:

+----------------------+                                       +------------------------+
|                      |                                       |                        |
|                      |<---->Both client and server create<-->| +                      |
|                      |        sockets here)                  | | Server listens for   |
|                      |                                       | | incoming             |
|                      |           Connect                     | v connections          |
|                      +-------------------------------------->|                        |
|                      |                                       |                        |
|                      |           Accept                      |                        |
|                      |<--------------------------------------+                        |
|                      |                                       |                        |
|                      |    Send URL that is to be fetched     |                        |
|                      +-------------------------------------->|                        |
|                      |                                       | +                      |
|                      |                                       | | Server accepts the   |
|                      |                                       | | URL, makes a request |
|                      |                                       | | to a web server using|
|                      |                                       | | GET request, stores  |
|                      |                                       | | the received data    |
|                      |                                       | | in a file named as   |
|                      |   									   | | the MD5 hash of the  |
|                      |   Send the size of the file and the   | |  URL                 |
|                      |   size of the file to the client      | v                      |
|                      |<--------------------------------------+                        |
|                      |                                       |                        |
|                      |                                       |                        |
|                      |                                       |                        |
|                      |                                       |                        |
|                      |                                       |                        |
|                      |                                       |                        |
|                      |                                       |                        |
+----------------------+                                       |                        |
                                                               +------------------------+
        CLIENT
                                                                       SERVER
	
	The server program is intended to be a continous running module (i.e. it does not stop after
	serving one client request). The server supports a flag -p using which the port should be specified.
	The server listens on this port for any incoming client requests. On receiving a request, the server
	will try to fetch the URL passed by the client. Once the data is fetched, the server parses the data to remove
	the HTTP header and stores the payload into a file named using the md5 hash of the URL. The server then sends
	the client a message containing the filename in which the data is saved and the size of the file.
	The server then terminates the connection and waits for additional client requests. If another client later connects
	to the server and the server finds that the URL requested to be fetched is already present in the current directory,
	instead of downloading the file again; the server sends the filename and size of the stored file in a message to the
	client.
	
	The client program supports the flags -p and -h using which the port and hostname for the server is to be specified.
	It also provides support for a -u flag using which the URL for the page to be downloaded is specified.
	The client then waits for the server to finish its processing and once it recieves the appropriate message
	(i.e. message containing filename and size), it terminates.
	
	The compilation process of both these modules is made simple by the provision of makefiles.
	On compilation, two executables are produced: sserver and sclient. Execute them as instructed above.
	The best way to test this program is to run the client and the server modules on two different nodes.
	
Limitations

	Although I have tried to implement the program to the best of my ability, it has the following limitations:
	1. Error-checking done for standard cases but not for corner-cases
	2. URL parsing is done for http/https URL formats only
	3. The server is designed to handle only one client at a time